cube<-function(x,n) {}
cube<-function(x,n) {}
cube<-function(x,n) {x^3}
cube(3)
formals(sd)
args(lm)
formals(lm)
?lm
ls(1,2,3,4)
ls(1,2,3)
ls
lm
lm(1,2,3,4)
add2<-function(x,y) {
x+y
}
add2(3,5)
above<-function(x,n) {
use<-x>n
x[use]
}
x<-1:20
x
above(x,5)
above(x,12)
above<-function(x,n=10) {
use<-x>n
x[use]
}
above(x)
args(numeric)
agrs(mean)
args(mean)
columnmean<-function(y) {    ## establish function of "y"
nc<-ncol(y)                ## establish nc variable that is the number of columns of the matrix "y"
means<-numeric(nc)         ## initialize empty vector called "means" - numberic vector the length of "nc"
for(i in 1:nc) {           ## create for loop that puts elements into the "means" vector
means[i]<-mean(y[,i])] ## evaluate mean of each column "i" in "y" matrix
}
means                      ## return the "means" vector (R will always return the output of the last expression)
}
columnmean<-function(y) {    ## establish function of "y"
nc<-ncol(y)                ## establish nc variable that is the number of columns of the matrix "y"
means<-numeric(nc)         ## initialize empty vector called "means" - numeric vector the length of "nc"
for(i in 1:nc) {           ## create for loop that puts elements into the "means" vector
means[i]<-mean(y[,i]) ## evaluate mean of each column "i" in "y" matrix
}
means                      ## return the "means" vector (R will always return the output of the last expression)
}
columnmean(airquality)
columnmean<-function(y, removeNA=TRUE) {    ## establish function of "y"
nc<-ncol(y)                ## establish nc variable that is the number of columns of the matrix "y"
means<-numeric(nc)         ## initialize empty vector called "means" - numeric vector the length of "nc"
for(i in 1:nc) {           ## create for loop that puts elements into the "means" vector
means[i]<-mean(y[,i],na.rm=removeNA) ## evaluate mean of each column "i" in "y" matrix
}
means                      ## return the "means" vector (R will always return the output of the last expression)
}
columnmean(airquality)
?na.rm
args(na.rm)
?lm
search()
x<-as.Date("1970-01-01")
x
unclass(x)
weekdays(x)
months(x)
quarters(x)
x<-Sys.time()
x
Sys.time()
p<-as.POSIXlt(x)
names(unclass(p))
p$sec
unclass(x)
x$sec
p<-as.POSIXlt(x)
x$sec
p
p$sec
datestring<-c("January 10, 2012 10:40", "December 9, 2011")
x<-strptime(datestring, "%B %d, %Y %H:%M")
x
datestring<-c("January 10, 2012 10:40", "December 9, 2011
x<-strptime(datestring, "%B %d, %Y %H:%M")
x
datestring<-c("January 10, 2012 10:40", "December 9, 2011")
datestring<-c("January 10, 2012 10:40", "December 9, 2011)
x<-strptime(datestring, "%B %d, %Y %H:%M")
datestring<-c("January 10, 2012 10:40", "December 9, 2011")
x<-strptime(datestring, "%B %d, %Y %H:%M")
x
x<-as.Date("2012-03-01") y<-as.Date("2012-02-28")
x<-as.Date("2012-03-01")
y<-as.Date("2012-02-28")
x-y
cube<-function(x,n)
{x^3}
cube(3)
x<-1:10
if(x>5){}
if(x>5) {x<-0}
?if
help
?if()
f<-function(x) {}
f<-function(x) {g<}
f<-function(x) {
g<- function(y) {
y+z
}
z<-4
x+g(x)
}
z<-10
f(3)
?parent.frame
x<-5
y<-if(x<3) {
NA
}else{
10
}
y<-if(x<3) {
NA
}else{
10
}x
y<-if(x<3) {
NA
}else{
10
}
y<-if(x<3) {
NA
}else{
10
x
}
y
y<-if(x<3) {
NA
}else{
10
y
}
y
?is.vector
?is.object
?rnorm
args(rnorm)
args(lapply)
x<-list(a=1:5, b=rnorm(10))
lapply(x,mean)
x<-list(a=1:4, b=rnorm(10),c=rnorm(20,1),d=rnorm(100,5))
lapply(x,mean)
x<-1:4
lapply(x,runif)
args(runif)
x<-list(a=matrix(1:4,2,2),b=matrix(1:6,3,2))
x
lapply(x,function(elt) elt[,1])
?str
str(apply)
args(apply)
?quantile
?array
str(array)
?gl
x<-c(rnorm(10),runif(10),rnorm(10,1))
f<-gl(3,10)
f
tapply(x,f,mean)
?tapply
tapply(x,f=1,mean)
x<-c(rnorm(10),runif(10),rnorm(10,1))
f<-gl(3,10)
split(x,f)
lapply(split(x,f),mean)
library(airquality)
library(data)
airquality
s<-split(airquality,airquality$Month)
is.data.frame(airquality)
lapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
args(lapply)
x<-rnorm(10)
f1<-gl(2,5)
f2<gl(5,2)
f2<-gl(5,2)
f1
f2
interaction(f1,f2)
noise<-function(n,mean,sd){rnorm(n,mean,sd)}
noise(5,1,2)
rnorm(5,1,2)
mapply(noise,1:5,1:5,2)
library(datasets)
data(iris)
?iris
iris
args(colMean)
args(colMeans)
colNames(iris)
colnames(iris)
tapply(iris,colnames,mean)
species<-split(iris,iris$Species)
species
lapply(species,function(x)colMeans(x[c"Sepal.Lenth"]))
lapply(species,function(x)colMeans(x,[c"Sepal.Lenth"]))
lapply(species,function(x)colMeans(x,[c("Sepal.Lenth")])
lapply(species,function(x)colMeans(x,[c("Sepal.Lenth")]))
lapply(species,function(x)colMeans(x[,c("Sepal.Lenth")]))
lapply(species,function(x)colMeans(x[,"Sepal.Lenth"]))
colnames(species)
lapply(species,function(x)colMeans(x[,1:5]))
args(colMeans)
colMeans(series)
args(data.frame)
series2<-data.frame(series)
split(iris,colnames)
install.packages("swirl")
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9.3.14)
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
mySqrt<-(z-1)^2
mySqrt<-sqrt(z-1)
mySqrt
myDiv<-z/mySqrt
myDiv
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
str()
?str
str(above)
summary(above)
str(x)
summary(x)
f<-gl(40,10)
str(f)
summary(f)
library(datasets)
head(aiquality)
head(airquality)
str(airquality)
m<-matrix(rnorm(100),10,10)
str(m)
s<-split(airquality,airquality$Month)
s
str(s)
s<-split(airquality,airquality$Month==5)
str(s)
args(rnorm)
Formals(rnorm)
Formal(rnorm)
x<-rnorm(10)
x
x<-(10,20,2)
x<-rnorm(10,20,2)
x
set.seed(1)
rnorm(5)
?set.seed
rnorm(5)
set.seed(1)
rnorm(5)
str(pois)
str(rpois)
?ppois
set.seed(20)
x<-rnorm(100)
args(rnorm)
set.seed(20)
x<-rnorm(100)
e<-rnorm(100,0,2)
y<-0.5 + 2*x +e
summary(y)
plot(x,y)
plot(x,y)
set.seed(10)
x<-rbinom(100,1,0.5)
e<-rnorm(100,0,2)
y<-0.5 + 2*x +e
summary(y)
plot(x,y)
set.seed(1)
x<-rnorm(100)
log.mu<-0.5 + 0.3*x
y<-rpois(100,exp(log.mu))
summary(y)
plot(x,y)
plot(x,y)
sample(1:10,4)
sample(1:10, 4)
set.sedd(1)
sample(1:10,4)
sample(1:10,4)
set.seed(1)
set.seed(1)
sample(1:10,4)
sample(1:10,4)
sample(letter, 5)
sample(lettesr, 5)
sample(letters, 5)
sample(1:10)
sample(1:10)
sample(1:10, replace = TRUE)
system.time(readLines("http://www.jhsph.edu))
system.time(readLines("http://www.jhsph.edu))
system.time(readLines("http://www.jhsph.edu))
system.time(readLines("http://www.jhsph.edu))
system.time(readLines("http://www.jhsph.edu"))
?freed
?fread
?rbind
data.frames<-lapply(1:332,function(i)
{data.frame(read.csv(filelist[i]))})
filelist<-Sys.glob("*.csv")
data.frames<-lapply(1:332,function(i)
{data.frame(read.csv(filelist[i]))})
getwd("specdata")
setwd("specdata")
path()
path.find()
file.path()
getwd()
setwd("C://Users/kyount/Documents/(e) Personal/Data Science Course/WorkingDirectory")
getwd()
setwd("C://Users/kyount/Documents/(e) Personal/Data Science Course/WorkingDirectory/specdata")
getwd()
ls()
filelist<-Sys.glob("*.csv")
path<-file.path("C:","Users","kyount","Documents","(e) Personal","Data Science Course","WorkingDirectory","/")
path
data.frames<-lapply(1:332,function(i)
{data.frame(read.csv(filelist[i]))})
df1<-data.frames[1]
for (i in 1:332) {
function(i)
readfile<-read.csv(filelist[i])
data.frames<-data.frame(readfile)
}
readfile<-NULL
data.frames<-NULL
for (i in 1:332) {
function(i)
readfile<-read.csv(filelist[i])
data.frames<-data.frame(readfile)
}
readfile<-NULL
data.frames<-NULL
for (i in 1:332) {
function(i)
readfile<-read.csv("filelist[i]")
data.frames<-data.frame(readfile)
}
readfilelist<-lapply(1:32,function(i) {read.csv("filelist[i]")})
filelist[1]
readfilelist<-lapply(1:32,function(i) {read.csv(filelist[i])})
readfilelist<-lapply(1:332,function(i) {read.csv(filelist[i])})
data.frames<-lapply(1:332,function(i) {data.frame(readfilelist[i])})
data.frames[1]
class(data.frames[1])
?rbind
test<-matrix(unlist(readfilelist[1],ncol=5,byrow=TRUE))
test<-matrix(unlist(readfilelist[1]),ncol=5,byrow=TRUE))
test<-matrix(unlist(readfilelist[1]),ncol=5,byrow=TRUE)
readfilelist[1]
test<-matrix(unlist(readfilelist[1]),ncol=5,byrow=TRUE)
args(matrix)
?matrix
?unlist
data.frame(readfilelist[1])
test<-data.frame(readfilelist[1])
class(test)
for (i in 1:332) {data.frame(readfilelist[i])}
for (i in 1:332) {df<-data.frame(readfilelist[i])}
df
for (i in 1:332) {df<-data.frame(readfilelist[i])}
class(df)
data.frames<-list()
for (i in 1:332) {
data.frames[[i]]<-data.frame(readfilelist[i])
}
class(data.frames[1])
data.frames<-data.frame()
for (i in 1:332) {
data.frames[[i]]<-data.frame(readfilelist[i])
}
